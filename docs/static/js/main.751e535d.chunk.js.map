{"version":3,"sources":["pages/App.tsx","pages/markdown/App.tsx","pages/csv/App.tsx","pages/html/App.tsx","pages/toml/App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","Header","as","href","md","MarkdownIt","html","xhtmlOut","breaks","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","value","_unused","props","result","state","React","createRef","renderHtml","bind","event","render","target","this","setState","current","innerHTML","highlightAll","Form","TextArea","name","onChange","style","minHeight","ref","className","Component","JSON","CSVonChange","lines","split","headers","i","length","obj","currentline","undefined","j","push","placeholder","stringify","onInput","HTMLonChange","componentDidMount","iframe","document","getElementById","contentDocument","body","console","log","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","id","title","frameBorder","TOMLonChange","TOML","parse","reportWebVitals","onPerfEntry","a","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Container","version"],"mappings":"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","file":"static/js/main.751e535d.chunk.js","sourcesContent":["import { Header } from 'semantic-ui-react'\n\nfunction App(): JSX.Element {\n  return (\n    <><Header as='h1'>You can try out different editors here:</Header>\n      <ul>\n        <li><a href='#markdown'>Markdown (Powered by Markdown-It)</a></li>\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n","import { Header, Form, TextArea } from 'semantic-ui-react'\r\nimport MarkdownIt from 'markdown-it';\r\nimport hljs from 'highlight.js';\r\nimport React, { Component } from 'react';\r\n\r\nconst md = new MarkdownIt({\r\n  html: true,\r\n  xhtmlOut: true,\r\n  breaks: true,\r\n  linkify: true,\r\n  typographer: true,\r\n  highlight: function (str, lang) {\r\n    if (lang && hljs.getLanguage(lang)) {\r\n      try {\r\n        return hljs.highlight(str, { language: lang }).value;\r\n      }\r\n      catch (_unused) {}\r\n    }\r\n    return ''; // use external default escaping\r\n  }\r\n});\r\n\r\nclass App extends Component <{}, { html: string }> {\r\n  private result: React.RefObject<HTMLDivElement>;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { html: '' }\r\n    this.result = React.createRef();\r\n    this.renderHtml = this.renderHtml.bind(this);\r\n  }\r\n\r\n  renderHtml(event: { target: { value: string }}): void {\r\n    const html = md.render(event.target.value);\r\n    this.setState({ html: html });\r\n    if(this.result.current) this.result.current.innerHTML = html;\r\n    hljs.highlightAll();\r\n  };\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <Header as='h1'>Markdown</Header>\r\n        <Header as='h3'>Enter value: </Header>\r\n        <Form>\r\n          <TextArea\r\n          name=\"textValue\"\r\n          onChange={this.renderHtml}\r\n          style={{ minHeight: 200 }}\r\n          ></TextArea>\r\n        </Form>\r\n        { !!this.state.html && \r\n          <><Header as='h3'>Result</Header>\r\n          <div ref={this.result}></div>\r\n          <Header as='h3'>Raw HTML</Header>\r\n          <div>\r\n            <pre>\r\n             <code className=\"language-html\">\r\n               { this.state.html }\r\n             </code>\r\n           </pre>\r\n         </div></>\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { Header, TextArea, Form } from 'semantic-ui-react'\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component <{}, { JSON: any }> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { JSON };\r\n    this.CSVonChange = this.CSVonChange.bind(this);\r\n  }\r\n\r\n  // converts csv to JSON\r\n  CSVonChange (event: { target: { value: string }}): void {\r\n    const csv: string = event.target.value;\r\n    const lines: string[] = csv.split(\"\\n\");\r\n\r\n    const result: {}[] = [];\r\n\r\n    const headers = lines[0].split(\",\");\r\n\r\n    for(let i = 1; i < lines.length; i++){\r\n\r\n      const obj: {} = {};\r\n      const currentline = lines[i].split(\",\", undefined);\r\n\r\n      for(let j = 0; j < headers.length; j++){\r\n          obj[headers[j]] = currentline[j];\r\n      }\r\n      result.push(obj);\r\n    }\r\n    const JSON = result;\r\n    this.setState({ JSON: JSON });\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (  \r\n      <>\r\n        <Header as='h1'>CSV to JSON</Header>\r\n        <Form>\r\n          <TextArea placeholder='Enter CSV here' style={{ minHeight: 200 }} onChange={this.CSVonChange}></TextArea>\r\n        </Form>\r\n        <Header as='h3'>JSON</Header>\r\n        <pre><code className=\"language-json\">{JSON.stringify(this.state.JSON)}</code></pre>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { Header/*, Form, TextArea*/ } from 'semantic-ui-react'\r\nimport React, { Component } from 'react';\r\nimport AceEditor from \"react-ace\";\r\nimport './App.css';\r\n\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\r\n\r\nclass App extends Component {\r\n  private onInput;\r\n  constructor(props) {\r\n    super(props);\r\n    this.HTMLonChange = this.HTMLonChange.bind(this);\r\n    this.componentDidMount = this.componentDidMount.bind(this);\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    const iframe: any = document.getElementById('display');\r\n    if (iframe) {\r\n      const display = iframe.contentDocument.body;\r\n      display.innerHTML = `\r\n      <!DOCTYPE html>\r\n      <html>\r\n        <head>\r\n          <style>\r\n            .blue-text {\r\n              color: blue;\r\n              font-family: calibri;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <p class='blue-text'>Hello World!</p>\r\n        </body>\r\n      </html>\r\n      `;\r\n    }\r\n    else {\r\n      console.log('No display IFrame found!');\r\n    }\r\n  }\r\n\r\n  HTMLonChange(value: string): void {\r\n    const iframe: any = document.getElementById('display');\r\n    if (iframe) {\r\n      const display = iframe.contentDocument.body;\r\n      display.innerHTML = value;\r\n    }\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <Header as='h1'>HTML Editor</Header>\r\n        <AceEditor\r\n          placeholder=\"Enter HTML Code here\"\r\n          mode=\"html\"\r\n          theme=\"tomorrow\"\r\n          name=\"editor\"\r\n          // onLoad={this.onLoad}\r\n          onChange={this.HTMLonChange}\r\n          fontSize={14}\r\n          showPrintMargin={true}\r\n          showGutter={true}\r\n          highlightActiveLine={true}\r\n          value={`\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <style>\r\n      .blue-text {\r\n        color: blue;\r\n        font-family: calibri;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <p class='blue-text'>Hello World!</p>\r\n  </body>\r\n</html>\r\n          `}\r\n          setOptions={{\r\n            enableBasicAutocompletion: true,\r\n            enableLiveAutocompletion: true,\r\n            enableSnippets: true,\r\n            showLineNumbers: true,\r\n            tabSize: 2,\r\n          }}\r\n        />\r\n        <Header as='h3'>Result</Header>\r\n        <iframe id='display' title='display' frameBorder='0'></iframe>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { Header, TextArea, Form } from 'semantic-ui-react'\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport TOML from '@iarna/toml';\r\n\r\nclass App extends Component <{}, { JSON: any }> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { JSON };\r\n    this.TOMLonChange = this.TOMLonChange.bind(this);\r\n  }\r\n\r\n  // converts csv to JSON\r\n  TOMLonChange (event: { target: { value: string }}): void {\r\n    const result = TOML.parse(event.target.value);\r\n    const JSON = result;\r\n    this.setState({ JSON: JSON });\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (  \r\n      <>\r\n        <Header as='h1'>TOML to JSON</Header>\r\n        <Form>\r\n          <TextArea placeholder='Enter TOML here' style={{ minHeight: 200 }} onChange={this.TOMLonChange}></TextArea>\r\n        </Form>\r\n        <Header as='h3'>JSON</Header>\r\n        <pre><code className=\"language-json\">{JSON.stringify(this.state.JSON)}</code></pre>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = async (onPerfEntry: any): Promise<void> => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    const { getCLS, getFID, getFCP, getLCP, getTTFB } = await import('web-vitals');\n    getCLS(onPerfEntry);\n    getFID(onPerfEntry);\n    getFCP(onPerfEntry);\n    getLCP(onPerfEntry);\n    getTTFB(onPerfEntry);\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport 'highlight.js/styles/github.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\nimport Main from './pages/App';\nimport Markdown from './pages/markdown/App';\nimport CSV from './pages/csv/App';\nimport HTML from './pages/html/App';\nimport TOML from './pages/toml/App';\nimport reportWebVitals from './reportWebVitals';\nimport { version } from '../package.json';\n\nrender(\n  <StrictMode>\n    <Container>\n      <Main />\n      <Markdown />\n      <hr />\n      <CSV />\n      <hr />\n      <TOML />\n      <hr />\n      <HTML />\n      <hr />\n      <p>App version { version }</p>\n    </Container>\n  </StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}
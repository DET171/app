{"version":3,"sources":["pages/App.tsx","pages/markdown/App.tsx","pages/html/App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","Header","as","href","md","MarkdownIt","html","xhtmlOut","breaks","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","value","_unused","props","result","renderHtml","event","render","target","setState","current","innerHTML","highlightAll","state","React","createRef","Form","TextArea","name","onChange","this","ref","className","Component","onInput","bind","componentDidMount","iframe","document","getElementById","contentDocument","body","placeholder","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","id","title","frameBorder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Container","version","console","log"],"mappings":"kRAYeA,MAVf,WACE,OACE,qCAAE,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,qDACA,6BACE,6BAAI,mBAAGC,KAAK,YAAR,uD,uFCDNC,EAAK,IAAIC,IAAW,CACxBC,MAAM,EACNC,UAAU,EACVC,QAAQ,EACRC,SAAS,EACTC,aAAa,EACbC,UAAW,SAAUC,EAAKC,GACxB,GAAIA,GAAQC,IAAKC,YAAYF,GAC3B,IACE,OAAOC,IAAKH,UAAUC,EAAK,CAAEI,SAAUH,IAAQI,MAEjD,MAAOC,IAET,MAAO,MAgDIlB,E,kDAzCb,WAAYmB,GAAQ,IAAD,8BACjB,cAAMA,IAHAC,YAEW,IAMnBC,WAAa,SAACC,GACZ,IAAMhB,EAAOF,EAAGmB,OAAOD,EAAME,OAAOP,OACpC,EAAKQ,SAAS,CAAEnB,KAAMA,IACnB,EAAKc,OAAOM,UAAS,EAAKN,OAAOM,QAAQC,UAAYrB,GACxDQ,IAAKc,gBARL,EAAKC,MAAQ,CAAEvB,KAAM,IACrB,EAAKc,OAASU,IAAMC,YAHH,E,0CAanB,WACE,OACE,qCACE,cAAC9B,EAAA,EAAD,CAAQC,GAAG,KAAX,sBACA,cAACD,EAAA,EAAD,CAAQC,GAAG,KAAX,2BACA,cAAC8B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACAC,KAAK,YACLC,SAAUC,KAAKf,iBAGbe,KAAKP,MAAMvB,MACb,qCAAE,cAACL,EAAA,EAAD,CAAQC,GAAG,KAAX,oBACF,qBAAKmC,IAAKD,KAAKhB,SACf,cAACnB,EAAA,EAAD,CAAQC,GAAG,KAAX,sBACA,8BACC,8BACE,sBAAMoC,UAAU,gBAAhB,SACIF,KAAKP,MAAMvB,qB,GAlCViC,a,0BCuEHvC,G,uEAnFb,WAAYmB,GAAQ,IAAD,8BACjB,cAAMA,IAFAqB,aACW,EAEjB,EAAKL,SAAW,EAAKA,SAASM,KAAd,gBAChB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAHR,E,qDAMnB,WACE,IAAME,EAAcC,SAASC,eAAe,WACxCF,IACcA,EAAOG,gBAAgBC,KAC/BpB,UAAR,sU,sBAmBJ,SAASV,GACP,IAAM0B,EAAcC,SAASC,eAAe,WACxCF,IACcA,EAAOG,gBAAgBC,KAC/BpB,UAAYV,K,oBAIxB,WACE,OACE,qCACE,cAAChB,EAAA,EAAD,CAAQC,GAAG,KAAX,yBACA,cAAC,IAAD,CACE8C,YAAY,uBACZC,KAAK,OACLC,MAAM,WACNhB,KAAK,SAELC,SAAUC,KAAKD,SACfgB,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBrC,MAAK,mPAgBLsC,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,KAGb,cAAC3D,EAAA,EAAD,CAAQC,GAAG,KAAX,oBACA,wBAAQ2D,GAAG,UAAUC,MAAM,UAAUC,YAAY,a,GA/EvCxB,cCIHyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCKd1C,iBACE,cAAC,aAAD,UACE,eAACkD,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,uBACA,6CAAiBC,YAGrB9B,SAASC,eAAe,QAM1BmB,EAAgBW,QAAQC,O","file":"static/js/main.8b5768c1.chunk.js","sourcesContent":["import { Header } from 'semantic-ui-react'\n\nfunction App(): JSX.Element {\n  return (\n    <><Header as='h1'>You can try out different editors here:</Header>\n      <ul>\n        <li><a href='#markdown'>Markdown (Powered by Markdown-It)</a></li>\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n","import { Header, Form, TextArea } from 'semantic-ui-react'\r\nimport MarkdownIt from 'markdown-it';\r\nimport hljs from 'highlight.js';\r\nimport React, { Component } from 'react';\r\n\r\nconst md = new MarkdownIt({\r\n  html: true,\r\n  xhtmlOut: true,\r\n  breaks: true,\r\n  linkify: true,\r\n  typographer: true,\r\n  highlight: function (str, lang) {\r\n    if (lang && hljs.getLanguage(lang)) {\r\n      try {\r\n        return hljs.highlight(str, { language: lang }).value;\r\n      }\r\n      catch (_unused) {}\r\n    }\r\n    return ''; // use external default escaping\r\n  }\r\n});\r\n\r\nclass App extends Component <{}, { html: string }> {\r\n  private result: React.RefObject<HTMLDivElement>;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { html: '' }\r\n    this.result = React.createRef();\r\n  }\r\n\r\n  renderHtml = (event: { target: { value: string }}): void => {\r\n    const html = md.render(event.target.value);\r\n    this.setState({ html: html });\r\n    if(this.result.current) this.result.current.innerHTML = html;\r\n    hljs.highlightAll();\r\n  };\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <Header as='h1'>Markdown</Header>\r\n        <Header as='h3'>Enter value: </Header>\r\n        <Form>\r\n          <TextArea\r\n          name=\"textValue\"\r\n          onChange={this.renderHtml}\r\n          ></TextArea>\r\n        </Form>\r\n        { !!this.state.html && \r\n          <><Header as='h3'>Result</Header>\r\n          <div ref={this.result}></div>\r\n          <Header as='h3'>Raw HTML</Header>\r\n          <div>\r\n           <pre>\r\n             <code className=\"language-html\">\r\n               { this.state.html }\r\n             </code>\r\n           </pre>\r\n         </div></>\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { Header/*, Form, TextArea*/ } from 'semantic-ui-react'\r\nimport React, { Component } from 'react';\r\nimport AceEditor from \"react-ace\";\r\nimport './App.css';\r\n\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\r\n\r\nclass App extends Component {\r\n  private onInput;\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.componentDidMount = this.componentDidMount.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const iframe: any = document.getElementById('display');\r\n    if (iframe) {\r\n      const display = iframe.contentDocument.body;\r\n      display.innerHTML = `\r\n      <!DOCTYPE html>\r\n      <html>\r\n        <head>\r\n          <style>\r\n            .blue-text {\r\n              color: blue;\r\n              font-family: calibri;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <p class='blue-text'>Hello World!</p>\r\n        </body>\r\n      </html>\r\n      `;\r\n    }\r\n  }\r\n\r\n  onChange(value: string) {\r\n    const iframe: any = document.getElementById('display');\r\n    if (iframe) {\r\n      const display = iframe.contentDocument.body;\r\n      display.innerHTML = value;\r\n    }\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <Header as='h1'>HTML Editor</Header>\r\n        <AceEditor\r\n          placeholder=\"Enter HTML Code here\"\r\n          mode=\"html\"\r\n          theme=\"tomorrow\"\r\n          name=\"editor\"\r\n          // onLoad={this.onLoad}\r\n          onChange={this.onChange}\r\n          fontSize={14}\r\n          showPrintMargin={true}\r\n          showGutter={true}\r\n          highlightActiveLine={true}\r\n          value={`\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <style>\r\n      .blue-text {\r\n        color: blue;\r\n        font-family: calibri;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <p class='blue-text'>Hello World!</p>\r\n  </body>\r\n</html>\r\n          `}\r\n          setOptions={{\r\n            enableBasicAutocompletion: true,\r\n            enableLiveAutocompletion: true,\r\n            enableSnippets: true,\r\n            showLineNumbers: true,\r\n            tabSize: 2,\r\n          }}\r\n        />\r\n        <Header as='h3'>Result</Header>\r\n        <iframe id='display' title='display' frameBorder='0'></iframe>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport 'highlight.js/styles/github.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\nimport Main from './pages/App';\nimport Markdown from './pages/markdown/App';\nimport HTML from './pages/html/App';\nimport reportWebVitals from './reportWebVitals';\nimport { version } from '../package.json';\n\nrender(\n  <StrictMode>\n    <Container>\n      <Main />\n      <Markdown />\n      <HTML />\n      <hr />\n      <p>App version { version }</p>\n    </Container>\n  </StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}
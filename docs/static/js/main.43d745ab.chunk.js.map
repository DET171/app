{"version":3,"sources":["pages/App.tsx","pages/markdown/App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","Header","as","href","md","MarkdownIt","html","xhtmlOut","breaks","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","value","_unused","props","result","renderHtml","event","render","target","setState","current","innerHTML","highlightAll","state","React","createRef","Form","TextArea","name","onChange","this","ref","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","Container","version","document","getElementById","console","log"],"mappings":"qQAYeA,MAVf,WACE,OACE,qCAAE,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,qDACA,6BACE,6BAAI,mBAAGC,KAAK,YAAR,uD,yFCDNC,EAAK,IAAIC,IAAW,CACxBC,MAAM,EACNC,UAAU,EACVC,QAAQ,EACRC,SAAS,EACTC,aAAa,EACbC,UAAW,SAAUC,EAAKC,GACxB,GAAIA,GAAQC,IAAKC,YAAYF,GAC3B,IACE,OAAOC,IAAKH,UAAUC,EAAK,CAAEI,SAAUH,IAAQI,MAEjD,MAAOC,IAET,MAAO,MAgDIlB,E,kDAzCb,WAAYmB,GAAQ,IAAD,8BACjB,cAAMA,IAHAC,YAEW,IAMnBC,WAAa,SAACC,GACZ,IAAMhB,EAAOF,EAAGmB,OAAOD,EAAME,OAAOP,OACpC,EAAKQ,SAAS,CAAEnB,KAAMA,IACnB,EAAKc,OAAOM,UAAS,EAAKN,OAAOM,QAAQC,UAAYrB,GACxDQ,IAAKc,gBARL,EAAKC,MAAQ,CAAEvB,KAAM,IACrB,EAAKc,OAASU,IAAMC,YAHH,E,0CAanB,WACE,OACE,qCACE,cAAC9B,EAAA,EAAD,CAAQC,GAAG,KAAX,sBACA,cAACD,EAAA,EAAD,CAAQC,GAAG,KAAX,4BACA,cAAC8B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACAC,KAAK,YACLC,SAAUC,KAAKf,iBAGbe,KAAKP,MAAMvB,MACb,qCAAE,cAACL,EAAA,EAAD,CAAQC,GAAG,KAAX,oBACF,qBAAKmC,IAAKD,KAAKhB,SACf,cAACnB,EAAA,EAAD,CAAQC,GAAG,KAAX,sBACA,8BACC,8BACE,sBAAMoC,UAAU,gBAAhB,SACIF,KAAKP,MAAMvB,qB,GAlCViC,aCVHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCKdQ,IAAS1B,OACP,cAAC,IAAM2B,WAAP,UACE,eAACC,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,uBACA,6CAAiBC,YAGrBC,SAASC,eAAe,QAM1Bd,EAAgBe,QAAQC,O","file":"static/js/main.43d745ab.chunk.js","sourcesContent":["import { Header } from 'semantic-ui-react'\n\nfunction App(): JSX.Element {\n  return (\n    <><Header as='h1'>You can try out different editors here:</Header>\n      <ul>\n        <li><a href='#markdown'>Markdown (Powered by Markdown-It)</a></li>\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n","import { Header, Form, TextArea } from 'semantic-ui-react'\nimport MarkdownIt from 'markdown-it';\nimport hljs from 'highlight.js';\nimport React, { Component } from 'react';\n\nconst md = new MarkdownIt({\n  html: true,\n  xhtmlOut: true,\n  breaks: true,\n  linkify: true,\n  typographer: true,\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(str, { language: lang }).value;\n      }\n      catch (_unused) {}\n    }\n    return ''; // use external default escaping\n  }\n});\n\nclass App extends Component <{}, { html: string }> {\n  private result: React.RefObject<HTMLDivElement>;\n\n  constructor(props) {\n    super(props);\n    this.state = { html: '' }\n    this.result = React.createRef();\n  }\n\n  renderHtml = (event: { target: { value: string }}): void => {\n    const html = md.render(event.target.value);\n    this.setState({ html: html });\n    if(this.result.current) this.result.current.innerHTML = html;\n    hljs.highlightAll();\n  };\n\n  render(): JSX.Element {\n    return (\n      <>\n        <Header as='h1'>Markdown</Header>\n        <Header as='h3'>Enter value : </Header>\n        <Form>\n          <TextArea\n          name=\"textValue\"\n          onChange={this.renderHtml}\n          ></TextArea>\n        </Form>\n        { !!this.state.html && \n          <><Header as='h3'>Result</Header>\n          <div ref={this.result}></div>\n          <Header as='h3'>Raw HTML</Header>\n          <div>\n           <pre>\n             <code className=\"language-html\">\n               { this.state.html }\n             </code>\n           </pre>\n         </div></>\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'highlight.js/styles/github.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nimport { Container } from 'semantic-ui-react'\nimport Main from './pages/App';\nimport Showdown from './pages/markdown/App';\nimport reportWebVitals from './reportWebVitals';\nimport { version } from '../package.json';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container>\n      <Main />\n      <Showdown />\n      <hr />\n      <p>App version { version }</p>\n    </Container>\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}